// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios15.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BHSmartHomeFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Security
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers @objc public class GatewayUpdateNotification : ObjectiveC.NSObject {
  @objc public var operation: BHSmartHomeFramework.GatewayMessageType
  @objc public var deviceId: Swift.String?
  @objc public var data: Any?
  @objc deinit
}
@objc public enum GatewayError : Swift.Int {
  case missingAPIKey
  case invalidAPIKey
  case invalidCredentials
  case connectionError
  case codeAlreadyExists
  case tokenExpired
  case connectWiFi
  case gatewayNotFound
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GatewayType {
  case ezlo(id: Swift.String, url: Foundation.URL, identity: Swift.String, signature: Swift.String)
  case blaze
  public var connectionData: [Swift.String : Any] {
    get
  }
}
@objc public class Pincode : ObjectiveC.NSObject, Swift.Codable, Swift.Identifiable {
  @objc final public let id: Swift.String
  @objc final public let pincode: Swift.String
  @objc final public let name: Swift.String
  @objc public var restriction: BHSmartHomeFramework.Restriction?
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  public init(pincode: Swift.String, name: Swift.String)
  public init(name: Swift.String, pincode: Swift.String, restriction: BHSmartHomeFramework.Restriction?)
  public init(id: Swift.String, name: Swift.String, pincode: Swift.String, restriction: BHSmartHomeFramework.Restriction?)
  public static func == (lhs: BHSmartHomeFramework.Pincode, rhs: BHSmartHomeFramework.Pincode) -> Swift.Bool
  public typealias ID = Swift.String
  @objc deinit
}
@objc public class Restriction : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let start: Swift.String
  @objc final public let end: Swift.String
  @objc public init(start: Swift.String, end: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class Gateway : ObjectiveC.NSObject, Swift.Codable, Swift.Identifiable {
  @objc final public let gatewayId: Swift.Int
  @objc final public let status: Swift.String?
  @objc public var id: Swift.Int {
    @objc get
  }
  @objc public var batteryLevel: Swift.Int {
    @objc get
  }
  @objc public var lastSeen: Foundation.Date? {
    @objc get
  }
  public static func == (lhs: BHSmartHomeFramework.Gateway, rhs: BHSmartHomeFramework.Gateway) -> Swift.Bool
  public typealias ID = Swift.Int
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum GatewayConnectionType : Swift.String, Swift.Codable {
  case ethernet
  case modem
  case wifi
  case offline
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct WiFiNetwork : Swift.Codable, Swift.Identifiable, Swift.Hashable {
  public let rssi: Swift.Int
  public let encryption: Swift.String
  public let bssid: Swift.String
  public let channel: Swift.Int
  public let ssid: Swift.String
  public var id: Swift.String {
    get
  }
  public init(rssi: Swift.Int, encryption: Swift.String, bssid: Swift.String, channel: Swift.Int, ssid: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BHSmartHomeFramework.WiFiNetwork, b: BHSmartHomeFramework.WiFiNetwork) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum GatewayEventType : Swift.String {
  case hvacState
  case hvac
  case modeStatus
  case ambientTemperature
  case status
  case heatingSetpoint
  case coolingSetpoint
  case lock
  case code06
  case dlLockFailure
  case dlUsercode
  case dlLowBattery
  case dlVeryLowBattery
  case slBatteryalarm
  case dlArmedTripped
  case tripped
  case dlPinprogSucc
  case dlPinremvSucc
  case dlPinprogFail
  case dlLockChanged
  case dlPinfailed
  case dlLockButton
  case dlCodeChanged
  case fan
  case offline
  case gatewayOffline
  case gatewayOnline
  case occupancyOccupied
  case occupancyVacant
  case occupancyTourable
  case workOrderCreated
  case workOrderUpdated
  case newApplicationFilled
  case deviceEvent
  case other
  public var icon: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Event : Swift.Codable, Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public let code: Swift.String
  public let description: Swift.String
  public let deviceName: Swift.String
  public let filledForm: Swift.String?
  public let humanReadableTimestamp: Swift.String?
  public let newValue: Swift.String
  public let timestamp: Swift.Double
  public init(from decoder: any Swift.Decoder) throws
  public init(code: Swift.String, description: Swift.String, timestamp: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public var eventType: BHSmartHomeFramework.GatewayEventType {
    get
  }
  public var formattedDate: Swift.String {
    get
  }
  public func getEventTitle() -> Swift.String
  public func getEventDescription() -> Swift.String
  public typealias ID = Swift.String
}
@objc public enum GatewayMessageType : Swift.Int {
  case connect
  case deviceList
  case startWiFiScan
  case stopWiFiScan
  case connectWifi
  case connectionStatus
  case lock
  case unlock
  case addCode
  case removeCode
  case addCodeRestriction
  case removeCodeRestriction
  case fetchCodes
  case turnOn
  case turnOff
  case dim
  case arm
  case disarm
  case updateThermostatMode
  case updateThermostatFanMode
  case updateThermostatSetpoint
  case updateThermostatSetpointCooling
  case updateThermostatSetpointHeating
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol GatewayObserver {
  @objc func notify(_ notification: BHSmartHomeFramework.GatewayUpdateNotification)
  @objc func notify(error: BHSmartHomeFramework.GatewayError)
}
@_inheritsConvenienceInitializers @objc public class GatewayManager : ObjectiveC.NSObject {
  @objc public static let shared: BHSmartHomeFramework.GatewayManager
  @objc public var isConnected: Swift.Bool {
    @objc get
  }
  @objc public var gatewayId: Swift.String? {
    @objc get
  }
  @objc public func start(apiKey: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func fetchGateways(email: Swift.String, password: Swift.String, domain: Swift.String) async -> [BHSmartHomeFramework.Gateway]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func connect(_ gateway: BHSmartHomeFramework.Gateway) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func connect(gatewayId: Swift.Int, token: Swift.String) async
  #endif
  @objc public func connect()
  @objc public func disconnect()
  @objc public func reloadConnection()
  @objc public func send(_ messageType: BHSmartHomeFramework.GatewayMessageType, deviceId: Swift.String, data: [Swift.String : Any] = [:])
  @objc public func send(_ messageType: BHSmartHomeFramework.GatewayMessageType, data: [Swift.String : Any] = [:])
  @objc public func add(observer: any BHSmartHomeFramework.GatewayObserver)
  @objc public func remove(observer: any BHSmartHomeFramework.GatewayObserver)
  @objc public func clearObservers()
  @objc public func setSessionToken(_ token: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum DeviceCategory : Swift.Int {
  case dimmer = 2
  case lightSwitch = 3
  case motionSensor = 4
  case thermostat = 5
  case lock = 7
  case other = 0
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class Device : ObjectiveC.NSObject, Swift.Identifiable {
  @objc public var id: Swift.String
  @objc public var name: Swift.String
  @objc public var category: BHSmartHomeFramework.DeviceCategory
  @objc public var manufacturer: Swift.String?
  @objc public var model: Swift.String?
  @objc public var isBatteryPowered: Swift.Bool
  @objc public var batteryLevel: Swift.Int
  @objc public var firmware: Swift.String?
  @objc public var hardware: Swift.String?
  @objc public var deviceProtocol: Swift.String?
  @objc public var type: Swift.String
  @objc public init(id: Swift.String, name: Swift.String)
  public typealias ID = Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Thermostat : BHSmartHomeFramework.Device {
  @objc public var mode: Swift.String
  @objc public var fanmode: Swift.String
  @objc public var cool: Swift.String
  @objc public var heat: Swift.String
  @objc public var temperature: Swift.String
  @objc public var setPoint: Swift.String
  @objc override public var category: BHSmartHomeFramework.DeviceCategory {
    @objc get
    @objc set
  }
  @objc override public var type: Swift.String {
    @objc get
    @objc set
  }
  @objc override public init(id: Swift.String, name: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Lock : BHSmartHomeFramework.Device {
  @objc public var isLocked: Swift.Bool
  @objc public var pincodes: [BHSmartHomeFramework.Pincode]
  @objc override public var category: BHSmartHomeFramework.DeviceCategory {
    @objc get
    @objc set
  }
  @objc override public var type: Swift.String {
    @objc get
    @objc set
  }
  public static func == (lhs: BHSmartHomeFramework.Lock, rhs: BHSmartHomeFramework.Lock) -> Swift.Bool
  @objc override public init(id: Swift.String, name: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Switch : BHSmartHomeFramework.Device {
  @objc public var isOn: Swift.Bool
  @objc override public var category: BHSmartHomeFramework.DeviceCategory {
    @objc get
    @objc set
  }
  @objc override public var type: Swift.String {
    @objc get
    @objc set
  }
  @objc override public init(id: Swift.String, name: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MotionSensor : BHSmartHomeFramework.Device {
  @objc public var armed: Swift.Bool
  @objc override public var category: BHSmartHomeFramework.DeviceCategory {
    @objc get
    @objc set
  }
  @objc override public var type: Swift.String {
    @objc get
    @objc set
  }
  @objc override public init(id: Swift.String, name: Swift.String)
  @objc deinit
}
@objc public class Dimmer : BHSmartHomeFramework.Device {
  @objc public var level: Swift.Int
  @objc public var isOn: Swift.Bool
  @objc override public var category: BHSmartHomeFramework.DeviceCategory {
    @objc get
    @objc set
  }
  @objc override public var type: Swift.String {
    @objc get
    @objc set
  }
  @objc public init(id: Swift.String, name: Swift.String, level: Swift.Int = 0)
  @objc deinit
}
extension BHSmartHomeFramework.GatewayError : Swift.Equatable {}
extension BHSmartHomeFramework.GatewayError : Swift.Hashable {}
extension BHSmartHomeFramework.GatewayError : Swift.RawRepresentable {}
extension BHSmartHomeFramework.GatewayConnectionType : Swift.Equatable {}
extension BHSmartHomeFramework.GatewayConnectionType : Swift.Hashable {}
extension BHSmartHomeFramework.GatewayConnectionType : Swift.RawRepresentable {}
extension BHSmartHomeFramework.GatewayEventType : Swift.Equatable {}
extension BHSmartHomeFramework.GatewayEventType : Swift.Hashable {}
extension BHSmartHomeFramework.GatewayEventType : Swift.RawRepresentable {}
extension BHSmartHomeFramework.GatewayMessageType : Swift.Equatable {}
extension BHSmartHomeFramework.GatewayMessageType : Swift.Hashable {}
extension BHSmartHomeFramework.GatewayMessageType : Swift.RawRepresentable {}
extension BHSmartHomeFramework.DeviceCategory : Swift.Equatable {}
extension BHSmartHomeFramework.DeviceCategory : Swift.Hashable {}
extension BHSmartHomeFramework.DeviceCategory : Swift.RawRepresentable {}
