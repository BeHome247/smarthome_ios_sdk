// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BHSmartHomeFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Security
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
public struct GatewayUpdateNotification {
  public var operation: BHSmartHomeFramework.GatewayMessageType?
  public var deviceId: Swift.String?
  public var data: Any?
}
public enum GatewayError {
  case missingAPIKey
  case invalidCredentials
  case connectionError
  case codeAlreadyExists
  case tokenExpired
  case connectWiFi
  public static func == (a: BHSmartHomeFramework.GatewayError, b: BHSmartHomeFramework.GatewayError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GatewayType {
  case ezlo(id: Swift.String, url: Foundation.URL, identity: Swift.String, signature: Swift.String)
  case blaze
  public var connectionData: [Swift.String : Any] {
    get
  }
}
public class Pincode : Swift.Codable, Swift.Identifiable, Swift.Equatable {
  final public let id: Swift.String
  final public let pincode: Swift.String
  final public let name: Swift.String
  public var restriction: BHSmartHomeFramework.Restriction?
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  public init(pincode: Swift.String, name: Swift.String)
  public init(name: Swift.String, pincode: Swift.String, restriction: BHSmartHomeFramework.Restriction?)
  public init(id: Swift.String, name: Swift.String, pincode: Swift.String, restriction: BHSmartHomeFramework.Restriction?)
  public static func == (lhs: BHSmartHomeFramework.Pincode, rhs: BHSmartHomeFramework.Pincode) -> Swift.Bool
  public typealias ID = Swift.String
  @objc deinit
}
public class Restriction : Swift.Codable {
  final public let start: Swift.String
  final public let end: Swift.String
  public init(start: Swift.String, end: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct Gateway : Swift.Codable, Swift.Identifiable, Swift.Hashable {
  public let gatewayId: Swift.Int
  public let status: Swift.String?
  public var id: Swift.Int {
    get
  }
  public var batteryLevel: Swift.Int {
    get
  }
  public var lastSeen: Foundation.Date? {
    get
  }
  public static func == (lhs: BHSmartHomeFramework.Gateway, rhs: BHSmartHomeFramework.Gateway) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum GatewayConnectionType : Swift.String, Swift.Codable {
  case ethernet
  case modem
  case wifi
  case offline
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct WiFiNetwork : Swift.Codable, Swift.Identifiable, Swift.Hashable {
  public let rssi: Swift.Int
  public let encryption: Swift.String
  public let bssid: Swift.String
  public let channel: Swift.Int
  public let ssid: Swift.String
  public var id: Swift.String {
    get
  }
  public init(rssi: Swift.Int, encryption: Swift.String, bssid: Swift.String, channel: Swift.Int, ssid: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BHSmartHomeFramework.WiFiNetwork, b: BHSmartHomeFramework.WiFiNetwork) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum GatewayEventType : Swift.String {
  case hvacState
  case hvac
  case modeStatus
  case ambientTemperature
  case status
  case heatingSetpoint
  case coolingSetpoint
  case lock
  case code06
  case dlLockFailure
  case dlUsercode
  case dlLowBattery
  case dlVeryLowBattery
  case slBatteryalarm
  case dlArmedTripped
  case tripped
  case dlPinprogSucc
  case dlPinremvSucc
  case dlPinprogFail
  case dlLockChanged
  case dlPinfailed
  case dlLockButton
  case dlCodeChanged
  case fan
  case offline
  case gatewayOffline
  case gatewayOnline
  case occupancyOccupied
  case occupancyVacant
  case occupancyTourable
  case workOrderCreated
  case workOrderUpdated
  case newApplicationFilled
  case deviceEvent
  case other
  public var icon: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Event : Swift.Codable, Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public let code: Swift.String
  public let description: Swift.String
  public let deviceName: Swift.String
  public let filledForm: Swift.String?
  public let humanReadableTimestamp: Swift.String?
  public let newValue: Swift.String
  public let timestamp: Swift.Double
  public init(from decoder: any Swift.Decoder) throws
  public init(code: Swift.String, description: Swift.String, timestamp: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public var eventType: BHSmartHomeFramework.GatewayEventType {
    get
  }
  public var formattedDate: Swift.String {
    get
  }
  public func getEventTitle() -> Swift.String
  public func getEventDescription() -> Swift.String
  public typealias ID = Swift.String
}
public enum GatewayMessageType {
  case connect
  case deviceList
  case startWiFiScan
  case stopWiFiScan
  case connectWifi
  case connectionStatus
  case lock
  case unlock
  case addCode
  case removeCode
  case addCodeRestriction
  case removeCodeRestriction
  case fetchCodes
  case turnOn
  case turnOff
  case dim
  case arm
  case disarm
  case updateThermostatMode
  case updateThermostatFanMode
  case updateThermostatSetpoint
  case updateThermostatSetpointCooling
  case updateThermostatSetpointHeating
  public static func == (a: BHSmartHomeFramework.GatewayMessageType, b: BHSmartHomeFramework.GatewayMessageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol GatewayObserver : AnyObject {
  func notify(_ notification: BHSmartHomeFramework.GatewayUpdateNotification)
  func notify(error: BHSmartHomeFramework.GatewayError)
}
@_hasMissingDesignatedInitializers public class GatewayManager {
  public static let shared: BHSmartHomeFramework.GatewayManager
  public var isConnected: Swift.Bool {
    get
  }
  public var gatewayId: Swift.String? {
    get
  }
  public func start(apiKey: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func fetchGateways(email: Swift.String, password: Swift.String, domain: Swift.String) async -> [BHSmartHomeFramework.Gateway]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func connect(_ gateway: BHSmartHomeFramework.Gateway) async
  #endif
  public func connect()
  public func disconnect()
  public func reloadConnection()
  public func send(_ messageType: BHSmartHomeFramework.GatewayMessageType, deviceId: Swift.String, data: [Swift.String : Any] = [:])
  public func send(_ messageType: BHSmartHomeFramework.GatewayMessageType, data: [Swift.String : Any] = [:])
  public func add(observer: any BHSmartHomeFramework.GatewayObserver)
  public func remove(observer: any BHSmartHomeFramework.GatewayObserver)
  public func clearObservers()
  public func setSessionToken(_ token: Swift.String)
  @objc deinit
}
public enum Device : Swift.Codable, Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  case thermostat(BHSmartHomeFramework.Thermostat)
  case lock(BHSmartHomeFramework.Lock)
  case lightSwitch(BHSmartHomeFramework.Switch)
  case dimmer(BHSmartHomeFramework.Dimmer)
  case motionSensor(BHSmartHomeFramework.MotionSensor)
  case other
  public var value: Any? {
    get
  }
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var type: Swift.String {
    get
  }
  public var iconType: Swift.String {
    get
  }
  public var isThermostat: Swift.Bool {
    get
  }
  public var isLock: Swift.Bool {
    get
  }
  public var isMotionSensor: Swift.Bool {
    get
  }
  public var isOther: Swift.Bool {
    get
  }
  public var isOn: Swift.Bool {
    get
    set
  }
  public var isBatteryPowered: Swift.Bool {
    get
  }
  public var batteryLevel: Swift.Int {
    get
  }
  public var manufacturer: Swift.String {
    get
  }
  public var model: Swift.String {
    get
  }
  public var firmware: Swift.String {
    get
  }
  public var hardware: Swift.String {
    get
  }
  public var deviceProtocol: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: BHSmartHomeFramework.Device, rhs: BHSmartHomeFramework.Device) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public class Thermostat : Swift.Codable {
  public var id: Swift.String
  public var name: Swift.String
  public var manufacturer: Swift.String?
  public var model: Swift.String?
  public var deviceProtocol: Swift.String?
  public var hardware: Swift.String?
  public var firmware: Swift.String?
  public var isBatteryPowered: Swift.Bool
  public var mode: Swift.String
  public var batteryLevel: Swift.Int?
  public var fanmode: Swift.String
  public var cool: Swift.String
  public var heat: Swift.String
  public var temperature: Swift.String
  public var setPoint: Swift.String
  public init(id: Swift.String, name: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class Lock : Swift.Codable, Swift.Identifiable, Swift.Hashable {
  public var id: Swift.String
  public var name: Swift.String
  public var manufacturer: Swift.String?
  public var model: Swift.String?
  public var deviceProtocol: Swift.String?
  public var hardware: Swift.String?
  public var firmware: Swift.String?
  public var isBatteryPowered: Swift.Bool
  public var isLocked: Swift.Bool
  public var batteryLevel: Swift.Int?
  public var pincodes: [BHSmartHomeFramework.Pincode]
  public init(id: Swift.String, name: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: BHSmartHomeFramework.Lock, rhs: BHSmartHomeFramework.Lock) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias ID = Swift.String
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class Switch : Swift.Codable {
  public var id: Swift.String
  public var name: Swift.String
  public var manufacturer: Swift.String?
  public var model: Swift.String?
  public var deviceProtocol: Swift.String?
  public var hardware: Swift.String?
  public var firmware: Swift.String?
  public var isBatteryPowered: Swift.Bool
  public var isOn: Swift.Bool
  public var batteryLevel: Swift.Int?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(id: Swift.String, name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MotionSensor : Swift.Codable {
  public var id: Swift.String
  public var name: Swift.String
  public var manufacturer: Swift.String?
  public var model: Swift.String?
  public var deviceProtocol: Swift.String?
  public var hardware: Swift.String?
  public var firmware: Swift.String?
  public var armed: Swift.Bool
  public var batteryLevel: Swift.Int?
  public var isBatteryPowered: Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class Dimmer : Swift.Codable {
  public var id: Swift.String
  public var name: Swift.String
  public var manufacturer: Swift.String?
  public var model: Swift.String?
  public var deviceProtocol: Swift.String?
  public var hardware: Swift.String?
  public var firmware: Swift.String?
  public var level: Swift.Int
  public var isOn: Swift.Bool
  public var isBatteryPowered: Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(id: Swift.String, name: Swift.String, level: Swift.Int = 0)
  @objc deinit
}
extension BHSmartHomeFramework.GatewayError : Swift.Equatable {}
extension BHSmartHomeFramework.GatewayError : Swift.Hashable {}
extension BHSmartHomeFramework.GatewayConnectionType : Swift.Equatable {}
extension BHSmartHomeFramework.GatewayConnectionType : Swift.Hashable {}
extension BHSmartHomeFramework.GatewayConnectionType : Swift.RawRepresentable {}
extension BHSmartHomeFramework.GatewayEventType : Swift.Equatable {}
extension BHSmartHomeFramework.GatewayEventType : Swift.Hashable {}
extension BHSmartHomeFramework.GatewayEventType : Swift.RawRepresentable {}
extension BHSmartHomeFramework.GatewayMessageType : Swift.Equatable {}
extension BHSmartHomeFramework.GatewayMessageType : Swift.Hashable {}
